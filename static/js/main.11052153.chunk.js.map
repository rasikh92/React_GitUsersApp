{"version":3,"sources":["assets/Octocat.png","components/Jumbotron/Jumbotron.js","components/Input/Input.js","components/Button/Button.js","components/Footer/Footer.js","components/Card/Card.js","components/List/List.js","components/Message/Message.js","components/Spinner/Spinner.js","container/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Jumbotron","props","react_default","a","createElement","className","label","Input","placeholder","onChange","Button","onClick","clicked","Footer","href","target","src","Img","alt","Card","results","map","result","key","id","avatar_url","login","url","score","List","_useState","useState","_useState2","Object","slicedToArray","res","setRes","_useState3","_useState4","resultArr","setResultArr","onClickHandler","components_Card_Card","message","msgType","spinner","Main","state","text","quickresult","error","touched","fetchData","axios","get","then","item","data","items","push","total_count","_this","setState","catch","err","response","onChangeHandler","event","preventDefault","persist","concat","value","run","onClickedListener","onTouched","_this2","this","_","debounce","input","components_Input_Input","Spinner_Spinner","length","react","components_Jumbotron_Jumbotron","Message_Message","components_Button_Button","components_List_List","components_Footer_Footer","link","Component","App","container_Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11052153.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Octocat.14f7c70e.png\";","import React from 'react';\nimport './Jumbotron.css';\n\nconst Jumbotron = props => (\n<div className=\"header\">\n    <div className=\"jumbotron\">\n        <label className=\"text\">{props.label}</label>\n    </div>\n</div>\n)\n\nexport default Jumbotron;","import React from 'react';\nimport './Input.css';\n\nconst Input = props => (\n    <input className='input' placeholder='Search by username' onChange={props.onChange}></input>\n)\n\nexport default Input;","import React from 'react';\nimport './Button.css';\n\nconst Button = props => (\n    <button className=\"button\" onClick={props.clicked}>\n        Submit\n    </button>\n)\n\nexport default Button;","import React from 'react';\nimport './Footer.css';\nimport Img from '../../assets/Octocat.png';\n\nconst Footer = props => (\n\n    <div className=\"Footer\">\n        <label className=\"footer-text\">{props.label}</label>\n            <a href=\"https://github.com/rasikh92/React_GitUsersApp\"\n                target=\"blank\">\n            <img className=\"img\" src={Img} alt=\"Github Link\">\n            </img></a>\n    </div>\n\n);\n\nexport default Footer;","import React from 'react';\nimport './Card.css';\n\nconst Card = props => \n    <div>\n        {props.results.map(result => (\n            <div className=\"Card\" key={result.id}>\n                    <div className=\"frame\">\n                        <img src={result.avatar_url} alt=\"user\">\n                        </img>\n                    </div>\n                    <label className=\"title\">{result.login}</label>\n                    <label className=\"card-text\">Link:  \n                    <a href={result.url} className={\"over\"}>{result.url}</a></label>\n                    <label className=\"card-score-text\">Score: {result.score}</label>\n            </div>\n            ))\n        }\n    </div>\n\nexport default Card;","import React, {useState} from 'react';\nimport './List.css';\nimport Card from '../Card/Card';\n\nconst List = props => {\n    const [res, setRes] = useState(false);\n    const [resultArr, setResultArr] = useState([]);\n\n    const onClickHandler = (result) => {\n        setResultArr([result]);\n        setRes(true);\n    }\n\n    return (\n        <div>\n            <ul>        \n                {!res ? (props.results.map(result => (\n                    <li className=\"List\" key={result.id} onClick={() => onClickHandler(result)}>\n                        {result.login}\n                    </li>\n                ))\n                )\n                : null}\n            </ul>\n            \n            {res ? <Card results = {resultArr}/> : null}\n        </div>\n    )\n}\n\nexport default List;","import React from 'react';\nimport './Message.css';\n\nconst message = props => {\n    const msgType = 'Message ' + props.msgType;\n\n    return (<div className = {msgType} onClick = {props.clicked}>\n                {props.message}\n            </div>)\n}\n\nexport default message;","import React from 'react';\nimport './Spinner.css';\n\nconst spinner = () => (\n    <div className=\"loader\">\n        Loading.....\n    </div>\n)\n\nexport default spinner;","import React, {Component, Fragment} from 'react';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport Jumbotron from '../../components/Jumbotron/Jumbotron';\nimport Input from '../../components/Input/Input';\nimport Button from '../../components/Button/Button';\nimport Footer from '../../components/Footer/Footer';\nimport List from '../../components/List/List';\nimport Card from '../../components/Card/Card';\nimport Message from '../../components/Message/Message';\nimport Spinner from '../../components/Spinner/Spinner';\n\nclass Main extends Component {\n    state = {\n        text: \"\",\n        results: [],\n        result: false,\n        quickresult: false,\n        error: null,\n        touched: false\n    }\n    componentWillMount() {\n        this.run = _.debounce((url) => {this.fetchData(url)}, 500);\n    }\n    \n    fetchData = (url) => {\n        axios.get(url).then(\n            res => {\n                const results = [];\n                for(let item in res.data.items) {\n                    results.push({\n                        avatar_url: res.data.items[item].avatar_url,\n                        id: res.data.items[item].id,\n                        login: res.data.items[item].login,\n                        score: res.data.items[item].score,\n                        url: res.data.items[item].url,\n                        total_count: res.data.items[item].total_count\n                    })\n                }\n                this.setState({results: results, quickresult: true, result: false});  \n            }\n        ).catch(\n            err => {\n                this.setState({error: err.response.data.message});\n            }\n        )\n    }\n\n    onChangeHandler = (event) => {\n        event.preventDefault();\n        event.persist();\n\n        let url = 'https://api.github.com/search/users?q=';\n        \n        url = url.concat(event.target.value);\n\n        if(event.target.value !== \"\" || !this.state.quickresult) {\n            this.setState({text: event.target.value});\n            this.run(url);\n        }\n    }\n\n    onClickedListener = (event) => {\n        this.setState({result: true, quickresult: false, touched: false});\n    }\n\n    onTouched = () => {\n        this.setState({touched: !this.state.touched, error: null});\n    }\n\n    render () {\n\n        const input = <Input onChange = {this.onChangeHandler}/>\n        let result, spinner = null;\n        if(result = null) {\n            spinner = <Spinner />;\n        }\n        if(this.state.results.length === 0 && this.state.quickresult || \n            (this.state.results.length === 0 && this.state.result)) {\n                result = 0;\n            }\n        else if (this.state.result) {\n                result = this.state.results.length;\n        }\n        if(this.state.text !== \"\" && !this.state.quickresult && !this.state.result) {\n            spinner = <Spinner />;\n        }\n        //spinner here\n        return (\n            <Fragment>\n                <Jumbotron label=\"Github Search Users App\"/>\n                    {this.state.error && !this.state.touched ? \n                    <Message msgType = 'Error' message={this.state.error} clicked={this.onTouched}></Message> : null}\n                    { result === 0 && this.state.result && !this.state.touched ? \n                    <Message msgType = 'Fail' message = \"We found no results! - please try again\" clicked = {this.onTouched}/> : result > 0 && !this.state.touched ? \n                    <Message msgType = 'Success' message = {`Success! We found ` + result + ` results!`} clicked = {this.onTouched}/> : null}\n                    {input}\n                    <Button clicked={this.onClickedListener} />\n                    {spinner}\n                    {this.state.quickresult ? <List results = {this.state.results}></List> : null}\n                    {this.state.result ? <Card results = {this.state.results}/> : null}\n                <Footer label=\"&copy; 2019 Rasikh92\" link=\"https://github.com/rasikh92/React_GitUsersApp\"/>\n            </Fragment>\n        )\n    }\n}\n\nexport default Main;\n\n","import React from 'react';\nimport Main from './container/Main/Main';\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}